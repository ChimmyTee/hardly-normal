---

---

<div>
  <h1>Search by Last Name</h1>
  <input
    id="lastName"
    type="text"
    placeholder="Enter last name"
    class="border border-gray-300 p-2"
  />
  <input
    id="firstName"
    type="text"
    placeholder="Enter first name"
    class="border border-gray-300 p-2"
  />
  <input
    id="emailAddress"
    type="text"
    placeholder="email address"
    class="border border-gray-300 p-2"
  />
  <button id="lastNameBtn">Search</button>
</div>

<div>
  <h1>Search Result:</h1>
  <div id="lastNameResult"></div>
</div>

<div>
  <h1>Search Display:</h1>
  <div id="lastNameDisplay"></div>
</div>

<script>
  import ExcelJS from "exceljs";

  const lastNameInput = document.querySelector("#lastName") as HTMLInputElement;

  const lastNameResult = document.querySelector(
    "#lastNameResult"
  ) as HTMLElement;

  const lastNameDisplay = document.querySelector(
    "#lastNameDisplay"
  ) as HTMLElement;

  const files = import.meta.glob("/public/M1Database/index/*.xlsx");
  const filteredFiles = Object.keys(files).filter((file) =>
    file.match(/\/I.*\.xlsx$/)
  );

  console.log(files); // Logs all files

  console.log(filteredFiles[0]); // Logs only files starting with "I"

  // START of async function
  document.querySelector("#lastNameBtn").addEventListener("click", async () => {
    const lastName = lastNameInput.value;
    lastNameResult.innerText = `${lastName}\n${filteredFiles.join("\n")}`;

    const firstLetter = lastName.charAt(0).toUpperCase();
    const firstLetterRegex = new RegExp(`Index_${firstLetter}.xlsx`);
    const filteredIndexFiles = Object.keys(files).filter((file) =>
      file.match(firstLetterRegex)
    );
    lastNameDisplay.innerText = `${firstLetter}\n${filteredIndexFiles.join("\n")}`;

    // try {

    //   const workbook1 = new ExcelJS.Workbook();
    //   await workbook1.xlsx.readFile("/M1Database/index/Index_A.xlsx");

    //   // const workbook = new ExcelJS.Workbook();
    //   // await workbook.xlsx.readFile("/M1Database/index/Index_A.xlsx");
    // } catch (error) {
    //   console.error(error.path);
    // }

    // this is the method for getting the final last name file name
    try {
      const response = await fetch(filteredIndexFiles[0]);
      console.log("what is being fetched" + filteredIndexFiles[0]);
      console.log("true response" + response);
      // const response = await fetch("https://chimmytee.github.io/hardly-normal/M1Database/index/Index_A.xlsx")
      // Above line works with gitHub pages, but not with astro build
      // filterIndexFiles[0] prints out "/public/M1Database/index/Index_A.xlsx" would need to get rid of the public for github pages.
      if (!response.ok) {
        throw new Error(`Failed to fetch file: ${response.statusText}`);
      }
      const arrayBuffer = await response.arrayBuffer();
      const workbook1 = new ExcelJS.Workbook();
      await workbook1.xlsx.load(arrayBuffer);

      console.log("Workbook loaded successfully");
      console.log(filteredIndexFiles[0]);
      const worksheet = workbook1.getWorksheet(1);
      const jsonData = [];

      // another async eachRow function to get the data from the file.
      worksheet.eachRow(async function (row, rowNumber) {
        if (rowNumber === 1) {
          return; // Skip header row
        } else if (row.getCell(1).value == lastName) {

          const date = new Date(row.getCell(5).value.toString());
          const formattedDate = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}`;
          const orderNo = row.getCell(3).value;

          let email = row.getCell(4).value;
          if (typeof email === "object" && "text" in email) {
            email = email.text;
          }

          
          
          // The gnarly work for finding the rest of the itemInfos.
          let itemsInfoFilePath = `/public/M1Database/order_items_info/${date.getFullYear()}`;
          if (date.getMonth() + 1 > 6) {
            itemsInfoFilePath += `/itemsInfo_Jul-Dec.xlsx`;
          }
          const itemsInfoResponse = await fetch(itemsInfoFilePath);
          if (!itemsInfoResponse.ok) {
            //throw new Error(`Failed to fetch file: ${response.statusText}`);
            return;
          }

          console.log("what was being fetched for Items Info" + itemsInfoResponse);
          const workbook2 = new ExcelJS.Workbook();
          const itemsInfoArrayBuffer = await itemsInfoResponse.arrayBuffer();
          await workbook2.xlsx.load(itemsInfoArrayBuffer);
          const worksheet2 = workbook2.getWorksheet(1);

          
          let product = "";
          let fulfilmentStore = "";

          worksheet2.eachRow(function (row, rowNumber) {
            if (rowNumber === 1) {
              return; // Skip header row
            } else if (row.getCell(1).value == orderNo) {
              product = row.getCell(2).value.toString();
              fulfilmentStore = row.getCell(3).value.toString();
            }
          })



          const rowData = {
            lastName: row.getCell(1).value,
            firstName: row.getCell(2).value,
            orderNo: row.getCell(3).value,
            email: email,
            orderDate: formattedDate,
            product: product,
            fulfilmentStore: fulfilmentStore,
          };

          jsonData.push(rowData);
        }
      });

      // lastNameDisplay.innerText = `${jsonData.map((row) => row.).join("\n")}`;
      lastNameDisplay.innerHTML = `
      <table>
        <thead>
          <tr>
            <th class="px-4 py-2">Last Name</th>
            <th class="px-4 py-2">First Name</th>
            <th class="px-4 py-2">OrderNo</th>
            <th class="px-4 py-2">Email</th>
            <th class="px-4 py-2">OrderDate</th>
            <th class="px-4 py-2">Product</th>
            <th class="px-4 py-2">Fulfilment Store</th>
          </tr>
        </thead>
        <tbody>
          ${jsonData
            .map(
              (row) => `
            <tr class="border">
              <td class="px-4 py-2">${row.lastName}</td>
              <td class="px-4 py-2">${row.firstName}</td>
              <td class="px-4 py-2">${row.orderNo}</td>
              <td class="px-4 py-2">${row.email}</td>
              <td class="px-4 py-2">${row.orderDate}</td>
              <td class="px-4 py-2">${row.product}</td>
              <td class="px-4 py-2">${row.fulfilmentStore}</td>
            </tr>
          `
            )
            .join("")}
        </tbody>
      </table>
    `;

      console.log(jsonData);
    } catch (error) {
      console.error(`Error loading file: ${error.message}`, error);
    }

    //   const workbook = new ExcelJS.Workbook();
    //   await workbook.xlsx.readFile("/public/M1Database/index/Index_A.xlsx");
    // } catch (error) {
    //   console.error(`Error loading file: ${filteredIndexFiles[0]}`, error);
    // }
  });
</script>
